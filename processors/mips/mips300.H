/******************************************************
 * Architecture Module header file.                   *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef  _MIPS300_H
#define  _MIPS300_H

#include "mips300_parms.H"
#include "systemc.h"
#include "ac_module.H"
#include "ac_utils.H"
#include "mips300_arch.H"
#include "mips300_isa.H"
#include "mips300_syscall.H"
#include "ac_tlm2_intr_port.H"
#include "mips300_intr_handlers.H"


class mips300: public ac_module, public mips300_arch {
private:
  sc_time time_1cycle;
  sc_time time_4cycle;

public:

  bool has_delayed_load;
  char* delayed_load_program;
  mips300_parms::mips300_isa ISA;
  mips300_intr_port_handler intr_port_hnd;
  ac_tlm2_intr_port intr_port;

  //!Address of Interpretation Routines.
  void** IntRoutine;

  unsigned* ins_cache;
  bool start_up;

  //!Dispatch Method.
  inline __attribute__((always_inline)) void* dispatch();

  //!Behavior execution method.
  void behavior();

  SC_HAS_PROCESS( mips300 );

  sc_event wake;

  //!Constructor.
  mips300( sc_module_name name_, mips300_parms::ac_word gl_id=0): ac_module(name_), mips300_arch(), ISA(*this), intr_port_hnd(*this,&wake), intr_port("intr_port", intr_port_hnd) {
    SC_THREAD( behavior );
    sensitive << wake;
    has_delayed_load = false; 
    start_up=1;
    id.write(gl_id);
    set_proc_freq(300);
  }

  void set_proc_freq(unsigned int proc_freq);

  unsigned get_ac_pc();

  void set_ac_pc( unsigned int value );

  virtual void PrintStat();

  void init(int ac, char* av[]);

  void init();

  void set_prog_args();

  void load(char* program);

  void delayed_load(char* program);

  void stop(int status = 0);

  virtual ~mips300() {};

};
#endif  //_MIPS300_H

