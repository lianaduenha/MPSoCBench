/******************************************************
 * Processor Module Implementation File.              *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#include  "mips300.H"
#include  "mips300_isa.cpp"

#include  "mips300_syscall.H"

void* mips300::dispatch() {
  /*************************************************************************************/
  /* SLEEP / AWAKE mode control                                                        */
  /* intr_reg may store 1 (AWAKE MODE) or 0 (SLEEP MODE) - default is AWAKE            */
  /* if intr_reg == 0, the simulator will be suspended until it happens the wake event */
  /* wake - this event will happen in the moment the processor receives and            */
  /* interrupt with code AWAKE (1)                                                     */
  /*************************************************************************************/
  if (intr_reg.read() == 0)  wait(wake);
  //!Updating Regs for behavioral simulation.
  if (ac_qk.need_sync()) {
    ac_qk.sync();
  }
  if( ac_pc >= MEM.get_size()){
    cerr << "ArchC: Address out of bounds (pc=0x" << hex << ac_pc << ")." << endl;
    stop();
    longjmp(ac_env, AC_ACTION_STOP);
  }
  ac_instr_counter++;
  unsigned ins_id;
  bool exec = true;

  if (ac_pc < 0x100) {
    //!Handling System calls.
    switch( ac_pc ){
      #define AC_SYSC(NAME,LOCATION) \
      case LOCATION: \
        ISA.syscall.NAME(); \
        exec = false; \
        return IntRoutine[0]; \
      break;
      #include <ac_syscall.def>
      #undef AC_SYSC

    } // switch( ac_pc )
  } // if( ac_pc < 0x100 )

  if (exec) {
    decode_pc = ac_pc;
    quant = 0;
    ins_cache = (ISA.decoder)->Decode(reinterpret_cast<unsigned char*>(buffer), quant);
    ins_id = ins_cache ? ins_cache[IDENT]: 0;

    if( ins_id == 0 ) {
      cerr << "ArchC Error: Unidentified instruction. " << endl;
      cerr << "PC = " << hex << ac_pc << dec << endl;
      stop();
      longjmp(ac_env, AC_ACTION_STOP);
    }

    ISA.cur_instr_id = ins_id;
  } // if (exec)
  return IntRoutine[ins_id];
}

void mips300::behavior() {

  void* vet[] = {&&I_Init, &&I_lb, &&I_lbu, &&I_lh, &&I_lhu, 
              &&I_lw, &&I_lwl, &&I_lwr, &&I_sb, &&I_sh, 
              &&I_sw, &&I_swl, &&I_swr, &&I_addi, &&I_addiu, 
              &&I_slti, &&I_sltiu, &&I_andi, &&I_ori, &&I_xori, 
              &&I_lui, &&I_add, &&I_addu, &&I_sub, &&I_subu, 
              &&I_slt, &&I_sltu, &&I_instr_and, &&I_instr_or, &&I_instr_xor, 
              &&I_instr_nor, &&I_nop, &&I_sll, &&I_srl, &&I_sra, 
              &&I_sllv, &&I_srlv, &&I_srav, &&I_mult, &&I_multu, 
              &&I_div, &&I_divu, &&I_mfhi, &&I_mthi, &&I_mflo, 
              &&I_mtlo, &&I_j, &&I_jal, &&I_jr, &&I_jalr, 
              &&I_beq, &&I_bne, &&I_blez, &&I_bgtz, &&I_bltz, 
              &&I_bgez, &&I_bltzal, &&I_bgezal, &&I_sys_call, &&I_instr_break};

  IntRoutine = vet;

  if (has_delayed_load) {
    MEM_mport.load(delayed_load_program);
    ac_pc = ac_start_addr;
    has_delayed_load = false;
  }

  int action = setjmp(ac_env);
  if (action == AC_ACTION_STOP) return;

  I_Init:
    goto *dispatch();

  I_lb: // Instruction lb
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lb(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lbu: // Instruction lbu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lbu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lh: // Instruction lh
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lh(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lhu: // Instruction lhu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lhu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lw: // Instruction lw
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lw(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lwl: // Instruction lwl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lwl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lwr: // Instruction lwr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lwr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sb: // Instruction sb
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sb(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sh: // Instruction sh
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sh(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sw: // Instruction sw
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sw(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_swl: // Instruction swl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_swl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_swr: // Instruction swr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_swr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_addi: // Instruction addi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_addi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_addiu: // Instruction addiu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_addiu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_slti: // Instruction slti
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_slti(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sltiu: // Instruction sltiu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_sltiu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_andi: // Instruction andi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_andi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_ori: // Instruction ori
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_ori(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_xori: // Instruction xori
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_xori(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_lui: // Instruction lui
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_lui(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_add: // Instruction add
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_add(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_addu: // Instruction addu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_addu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_sub: // Instruction sub
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sub(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_subu: // Instruction subu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_subu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_slt: // Instruction slt
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_slt(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sltu: // Instruction sltu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sltu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_and: // Instruction instr_and
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_and(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_or: // Instruction instr_or
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_or(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_xor: // Instruction instr_xor
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_xor(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_nor: // Instruction instr_nor
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_nor(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_nop: // Instruction nop
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_nop(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sll: // Instruction sll
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sll(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_srl: // Instruction srl
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_srl(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sra: // Instruction sra
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sra(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sllv: // Instruction sllv
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sllv(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_srlv: // Instruction srlv
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_srlv(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_srav: // Instruction srav
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_srav(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mult: // Instruction mult
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mult(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_multu: // Instruction multu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_multu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_4cycle);
    goto *dispatch();

  I_div: // Instruction div
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_div(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(sc_time(module_period_ns*30, SC_NS));
    goto *dispatch();

  I_divu: // Instruction divu
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_divu(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(sc_time(module_period_ns*30, SC_NS));
    goto *dispatch();

  I_mfhi: // Instruction mfhi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mfhi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mthi: // Instruction mthi
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mthi(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mflo: // Instruction mflo
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mflo(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_mtlo: // Instruction mtlo
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_mtlo(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_j: // Instruction j
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_J(ins_cache[1], ins_cache[8]);
    ISA.behavior_j(ins_cache[1], ins_cache[8]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_jal: // Instruction jal
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_J(ins_cache[1], ins_cache[8]);
    ISA.behavior_jal(ins_cache[1], ins_cache[8]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_jr: // Instruction jr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_jr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_jalr: // Instruction jalr
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_jalr(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_beq: // Instruction beq
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_beq(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bne: // Instruction bne
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bne(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_blez: // Instruction blez
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_blez(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bgtz: // Instruction bgtz
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bgtz(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bltz: // Instruction bltz
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bltz(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bgez: // Instruction bgez
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bgez(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bltzal: // Instruction bltzal
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bltzal(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_bgezal: // Instruction bgezal
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_I(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ISA.behavior_bgezal(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[7]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_sys_call: // Instruction sys_call
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_sys_call(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

  I_instr_break: // Instruction instr_break
    ISA._behavior_instruction(ins_cache[1]);
    ISA._behavior_mips300_Type_R(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ISA.behavior_instr_break(ins_cache[1], ins_cache[2], ins_cache[3], ins_cache[4], ins_cache[5], ins_cache[6]);
    ac_qk.inc(time_1cycle);
    goto *dispatch();

} // behavior()

#include <ac_sighandlers.H>
#include <ac_args.H>

void mips300::init() {
  if (ac_cache_traces.find("IC") != ac_cache_traces.end()) IC.set_trace(*ac_cache_traces["IC"]);
  if (ac_cache_traces.find("DC") != ac_cache_traces.end()) DC.set_trace(*ac_cache_traces["DC"]);

#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << endl << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();
  start_up = 0;
  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
  set_running();
}

void mips300::init(int ac, char *av[]) {

  args_t args = ac_init_args( ac, av);
  set_args(args.size, args.app_args);
  MEM_mport.load(args.app_filename);
  if (ac_cache_traces.find("IC") != ac_cache_traces.end()) IC.set_trace(*ac_cache_traces["IC"]);
  if (ac_cache_traces.find("DC") != ac_cache_traces.end()) DC.set_trace(*ac_cache_traces["DC"]);
#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << endl << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();
  start_up = 0;
  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
  set_running();
}

void mips300::set_prog_args(){
  ISA.syscall.set_prog_args(argc, argv);
}

//Stop simulation (may receive exit status)
void mips300::stop(int status) {
  cerr << endl << "ArchC: -------------------- Simulation Finished --------------------" << endl;
  ISA._behavior_end();
  ac_stop_flag = 1;
  ac_exit_status = status;
  set_stopped();
  longjmp(ac_env, AC_ACTION_STOP);
}

void mips300::load(char* program) {
  MEM_mport.load(program);
}

void mips300::delayed_load(char* program) {
  has_delayed_load = true;
  delayed_load_program = new char[strlen(program)];
  strcpy(delayed_load_program, program);
}

// Returns ac_pc value
unsigned mips300::get_ac_pc() {
  return ac_pc;
}

// Assigns value to ac_pc
void mips300::set_ac_pc(unsigned int value) {
  ac_pc = value;
}

// Wrapper function to PrintStat().
void mips300::PrintStat() {
  ac_arch<mips300_parms::ac_word, mips300_parms::ac_Hword>::PrintStat();
  std::cerr << "cache: IC\n";
  IC.print_statistics(std::cerr);
  std::cerr << "cache: DC\n";
  DC.print_statistics(std::cerr);
}

// Assigns value to processor frequency and updates cycle time values
void mips300::set_proc_freq(unsigned int proc_freq) {
  ac_module::set_proc_freq(proc_freq);
  time_1cycle=sc_time(1*module_period_ns, SC_NS);
  time_4cycle=sc_time(4*module_period_ns, SC_NS);
}

